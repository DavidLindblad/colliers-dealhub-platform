version: '3.9'

services:
  webapp:
    image: 'ghcr.io/triggerdotdev/trigger.dev:v3'
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    networks:
      - coolify
    environment:
      - LOGIN_ORIGIN=https://trigger.colliersdealhub.com
      - APP_ORIGIN=https://trigger.colliersdealhub.com
      - DEV_OTEL_EXPORTER_OTLP_ENDPOINT=https://trigger.colliersdealhub.com/otel
      - PORT=3030
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      - DIRECT_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      - REMIX_APP_PORT=3030
      - NODE_ENV=production
      - RUNTIME_PLATFORM=docker-compose
      - V3_ENABLED=true
      - TRIGGER_TELEMETRY_DISABLED=1
      - INTERNAL_OTEL_TRACE_DISABLED=1
      - INTERNAL_OTEL_TRACE_LOGGING_ENABLED=0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_TLS_DISABLED=true
      - WHITELISTED_EMAILS=${WHITELISTED_EMAILS}
      - ADMIN_EMAILS=${ADMIN_EMAILS}
      - FROM_EMAIL=${FROM_EMAIL}
      - REPLY_TO_EMAIL=${REPLY_TO_EMAIL}
      - DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT=${DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT}
      - DEFAULT_ENV_EXECUTION_CONCURRENCY_LIMIT=${DEFAULT_ENV_EXECUTION_CONCURRENCY_LIMIT}
      - MAGIC_LINK_SECRET=${SERVICE_BASE64_MAGICLINK}
      - SESSION_SECRET=${SERVICE_BASE64_SESSION}
      - ENCRYPTION_KEY=${SERVICE_BASE64_ENCRYPTION}
      - PROVIDER_SECRET=${SERVICE_PASSWORD_64_PROVIDER}
      - COORDINATOR_SECRET=${SERVICE_PASSWORD_64_COORDINATOR}
      - DEPLOY_REGISTRY_HOST=${DEPLOY_REGISTRY_HOST}
      - DEPLOY_REGISTRY_NAMESPACE=${DEPLOY_REGISTRY_NAMESPACE}
      - HTTP_SERVER_PORT=${HTTP_SERVER_PORT}
      - COORDINATOR_PORT=${HTTP_SERVER_PORT}
      - ELECTRIC_ORIGIN=http://electric:3000
      - EMAIL_TRANSPORT=${EMAIL_TRANSPORT}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - OBJECT_STORE_BASE_URL=${OBJECT_STORE_BASE_URL}
      - OBJECT_STORE_ACCESS_KEY_ID=${OBJECT_STORE_ACCESS_KEY_ID}
      - OBJECT_STORE_SECRET_ACCESS_KEY=${OBJECT_STORE_SECRET_ACCESS_KEY}
      - TASK_PAYLOAD_OFFLOAD_THRESHOLD=${TASK_PAYLOAD_OFFLOAD_THRESHOLD}
    labels:
      - traefik.enable=true
      - traefik.http.routers.trigger.rule=Host(`trigger.colliersdealhub.com`)
      - traefik.http.routers.trigger.entrypoints=https
      - traefik.http.routers.trigger.tls.certresolver=letsencrypt
      - traefik.http.services.trigger.loadbalancer.server.port=3030
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:3030/healthcheck', r => { process.exit(r.statusCode !== 200 ? 1 : 0); }).on('error', () => process.exit(1))"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres:
    image: 'postgres:16'
    restart: unless-stopped
    networks:
      - coolify
    volumes:
      - 'postgres-data:/var/lib/postgresql/data'
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
    command: ['-c', 'wal_level=logical']
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10

  redis:
    image: 'redis:7'
    restart: unless-stopped
    networks:
      - coolify
    volumes:
      - 'redis-data:/data'
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5

  docker-provider:
    image: 'ghcr.io/triggerdotdev/provider/docker:v3'
    restart: unless-stopped
    user: root
    depends_on:
      - webapp
    networks:
      - coolify
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    environment:
      - PLATFORM_HOST=webapp
      - PLATFORM_WS_PORT=3030
      - SECURE_CONNECTION=false
      - OTEL_EXPORTER_OTLP_ENDPOINT=https://trigger.colliersdealhub.com/otel
      - PLATFORM_SECRET=${SERVICE_PASSWORD_64_PROVIDER}
      - REGISTRY_HOST=${DEPLOY_REGISTRY_HOST}
      - REGISTRY_NAMESPACE=${DEPLOY_REGISTRY_NAMESPACE}
      - FORCE_CHECKPOINT_SIMULATION=${FORCE_CHECKPOINT_SIMULATION}
      - HTTP_SERVER_PORT=${HTTP_SERVER_PORT}
      - COORDINATOR_PORT=${HTTP_SERVER_PORT}
      - ENFORCE_MACHINE_PRESETS=true
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:9020/health', r => { process.exit(r.statusCode !== 200 ? 1 : 0); }).on('error', () => process.exit(1))"]
      interval: 5s

  coordinator:
    image: 'ghcr.io/triggerdotdev/coordinator:v3'
    restart: unless-stopped
    user: root
    depends_on:
      - webapp
    networks:
      - coolify
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    ports:
      - '127.0.0.1:9020:9020'
    environment:
      - PLATFORM_HOST=webapp
      - PLATFORM_WS_PORT=3030
      - SECURE_CONNECTION=false
      - OTEL_EXPORTER_OTLP_ENDPOINT=https://trigger.colliersdealhub.com/otel
      - PLATFORM_SECRET=${SERVICE_PASSWORD_64_COORDINATOR}
      - HTTP_SERVER_PORT=${HTTP_SERVER_PORT}
      - COORDINATOR_HOST=${COORDINATOR_HOST}
      - COORDINATOR_PORT=${HTTP_SERVER_PORT}
      - REGISTRY_HOST=${DEPLOY_REGISTRY_HOST}
      - REGISTRY_NAMESPACE=${DEPLOY_REGISTRY_NAMESPACE}
      - FORCE_CHECKPOINT_SIMULATION=${FORCE_CHECKPOINT_SIMULATION}
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:${HTTP_SERVER_PORT}/health', r => { process.exit(r.statusCode !== 200 ? 1 : 0); }).on('error', () => process.exit(1))"]
      interval: 5s

  electric:
    image: 'electricsql/electric:latest'
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - coolify
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable
      - ELECTRIC_SECRET=${ELECTRIC_SECRET}
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://127.0.0.1:3000/v1/health || exit 1"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 10s

volumes:
  postgres-data: null
  redis-data: null

networks:
  coolify:
    external: true 